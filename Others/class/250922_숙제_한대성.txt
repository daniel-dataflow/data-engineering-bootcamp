1. SOLID 법칙(원칙) 5가지
    1. 단일 책임 원칙 : 한 클래스는 하나의 책임만 가져야 한다.
    2. 개방 패쇄 원칙 : 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다
    3. 리스코프 치환 원칙 : “프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.” 계약에 의한 설계를 참고하라.
    4. 인터페이스 분리 원칙 : “특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.”
    5. 의존 역전 원칙 : 프로그래머는 “추상화에 의존해야지, 구체화에 의존하면 안된다.” 의존성 주입은 이 원칙을 따르는 방법 중 하나다.

1. 왜 굳이 변수를 private 하게 만들고 getter와 setter를 만들까?
    1.  ******이름 맹글링**(Name Mangling)****을 통해 내부적으로 이름이 변경되어 클래스 외부에서 직접 접근하기 어렵게 만들어, 캡슐화를 지원하고 다른 클래스와의 이름 충돌을 방지하기 위함입니다. 이는 엄격한 private이 아니라, 다른 클래스에서 우연히 같은 이름의 멤버를 사용했을 때 혼란을 막는 일종의 "숨김" 메커니즘입니다. 하지만 private로 지정을 하면 클래스 외부에서 직접 접근할 수 없기 때문에 간접적으로 접근 할 수 있는 방법이 getter 와 setter이다. private 변수의 값을 추출할때 getter로 가져오고 변경을 하고 싶을때 setter로 변경할 수 있다.
    
2. keyword(예약어)  :  특정 기능을 수행하도록 ‘미리 예약되어 있는 단어’이다. 각각의 예약어가 특정 기능 또는 의를 가지고 있기 때문에, 예약어는 클래스, 함수, 변수 등의 이름 등의 식별자으로 사용할 수 없다.